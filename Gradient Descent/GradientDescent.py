
import numpy  as np
from sklearn.datasets import make_regression
import matplotlib.pyplot as plt


def model(X, theta):
    return X.dot(theta)


def cost (X, y,theta):
    m = len(y)
    Cost = 1/(2*m)*np.sum((model(X, theta)-y)**2)
    return Cost
def grad (X, y,Theta):
    m = len(y)


    Grad = 1/m*X.T.dot(model(X,Theta)-y)
    return Grad
def gradientDescente(X,y, Theta, learningRate, iteration):

            for i in range(0,iteration):
                m = len(y)
                Theta = Theta - learningRate*(1/m)*(X.T).dot(X.dot(Theta)-y)
            return Theta


# x,y = make_regression(n_samples= 100, n_features=1, noise = 10)
# y  = y.reshape(100,1)                        # target (100,1)
# X = np.hstack((x, np.ones(x.shape)))    # les features (100,2)
# theta  = np.random.randn(2,1)  # valeur initiale random des parametres a et b
X = np.array([[ 0.02787345 , 1       ],
 [-0.29844703  , 1       ],
 [-0.11983177  ,1.        ],
 [ 0.61038988  ,1.        ],
 [-1.2835419   ,1.        ],
 [-0.32738524  ,1.        ],
 [ 1.84308195  ,1.        ],
 [ 0.32389066  ,1.        ],
 [-0.85887791  ,1.        ],
 [-1.58780892  ,1.        ],
 [ 0.50790346  ,1.        ],
 [-0.02751479  ,1.        ],
 [-0.34123614  ,1.        ],
 [-0.59058241  ,1.        ],
 [ 0.70670063  ,1.        ],
 [ 0.12060693  ,1.        ],
 [-0.40569713  ,1.        ],
 [ 2.15226366  ,1.        ],
 [-0.13387235  ,1.        ],
 [-0.78899075  ,1.        ],
 [-2.204397    ,1.        ],
 [ 0.69280751  ,1.        ],
 [-0.87724859  ,1.        ],
 [ 0.2743566   ,1.        ],
 [ 0.4229402   ,1.        ],
 [-1.05209956  ,1.        ],
 [ 1.08710008  ,1.        ],
 [-0.3341021  , 1.        ],
 [-0.43142338  ,1.        ],
 [-0.18658705  ,1.        ],
 [-0.79911124  ,1.        ],
 [ 0.24506498  ,1.        ],
 [-1.27046308  ,1.        ],
 [ 0.91124153  ,1.        ],
 [-0.69651058  ,1.        ],
 [-0.31209245  ,1.        ],
 [ 0.35563629  ,1.        ],
 [ 0.07734952  ,1.        ],
 [ 1.86510433  ,1.        ],
 [ 0.54076852  ,1.        ],
 [-0.32171483  ,1.        ],
 [ 0.66767347  ,1.        ],
 [-0.83990271  ,1.        ],
 [-0.67228866  ,1.        ],
 [ 0.4873568   ,1.        ],
 [-1.58078038  ,1.        ],
 [ 1.21841604  ,1.        ],
 [-0.15891273  ,1.        ],
 [-1.84263233  ,1.        ],
 [-1.03140792  ,1.        ],
 [ 1.97987975  ,1.        ],
 [ 1.67672275  ,1.        ],
 [-0.7682519   ,1.        ],
 [ 1.02571022  ,1.        ],
 [ 0.27597635  ,1.        ],
 [-0.37267559 , 1.        ],
 [-1.6420605  , 1.        ],
 [ 1.55073265 , 1.        ],
 [ 0.66019724 , 1.        ],
 [ 0.62770779 , 1.        ],
 [ 0.89019544 , 1.        ],
 [-1.09542875 , 1.        ],
 [ 1.63824608 , 1.        ],
 [ 0.59011043 , 1.        ],
 [ 1.19811921 , 1.        ],
 [ 0.33516116 , 1.        ],
 [ 1.48238239 , 1.        ],
 [ 0.07471088 , 1.        ],
 [-0.91852822 , 1.        ],
 [ 0.2493058  , 1.        ],
 [-0.6844024  , 1.        ],
 [ 0.78569162 , 1.        ],
 [ 0.02974844 , 1.        ],
 [-0.32589663 , 1.        ],
 [ 0.96971599 ,   1.        ],
 [-0.60192414 , 1.        ],
 [ 0.64638423 , 1.        ],
 [ 0.16975105 , 1.        ],
 [-1.88116571,  1.        ],
 [ 0.52321471,  1.        ],
 [-1.34751941,  1.        ],
 [-0.22565082,  1.        ],
 [ 0.17829781,  1.        ],
 [ 0.2259712 , 1.        ],
 [-0.23651275,  1.        ],
 [-1.32407523  ,1.        ],
 [-0.08903678  ,1.        ],
 [ 1.35364598  ,1.        ],
 [-1.90661009  ,1.        ],
 [ 0.02030729  ,1.        ],
 [-2.72626943  ,1.        ],
 [ 0.07555758  ,1.        ],
 [-1.32272384  ,1.        ],
 [-0.19860769  ,1.        ],
 [-0.76318022 , 1.        ],
 [-1.57427907 , 1.        ],
 [-0.5784446  , 1.        ],
 [ 0.95838952 , 1.        ],
 [-1.21589429 , 1.        ],
 [ 0.00874165 , 1.        ]])
y =np.array([[   6.78118664],
 [   2.17621431],
 [   1.20396775],
 [  33.17429644],
 [ -46.66101575],
 [ -33.59974308],
 [  70.65970372],
 [   2.39291278],
 [ -52.86162481],
 [ -61.02220295],
 [  22.15260663],
 [  -1.43711092],
 [ -11.28144501],
 [ -20.3586553 ],
 [  45.71093919],
 [ -13.12886466],
 [ -23.58665814],
 [  99.90681906],
 [   8.1898145 ],
 [ -28.53375921],
 [ -72.34501863],
 [  33.2948282 ],
 [ -44.63906507],
 [  16.68980057],
 [  12.34668845],
 [ -63.71161706],
 [  57.11717668],
 [ -31.89362883],
 [   2.90674092],
 [ -16.12125325],
 [ -40.28915437],
 [  16.44304803],
 [ -64.70293289],
 [  23.78604299],
 [ -35.5922722 ],
 [ -31.75921765],
 [  21.2563925 ],
 [   0.40502351],
 [  87.72540446],
 [  14.51191324],
 [  -2.44394099],
 [  42.21652414],
 [ -35.12309669],
 [ -21.52601734],
 [  11.33140875],
 [ -84.14608194],
 [  62.2396222 ],
 [ -14.04555437],
 [ -85.73895093],
 [ -56.46304848],
 [  84.6639159 ],
 [  60.68663074],
 [ -44.82901707],
 [  45.62315072],
 [  25.66526877],
 [ -12.43564395],
 [ -57.55324637],
 [  61.32808534],
 [  24.38892849],
 [  18.25949703],
 [  45.4223936 ],
 [ -35.1921567 ],
 [  84.78410016],
 [  30.52396233],
 [  48.14712573],
 [  22.16007045],
 [  44.58434183],
 [  -2.28815972],
 [ -51.88644162],
 [   7.0840711 ],
 [ -53.02016672],
 [  36.7045028 ],
 [  -6.4068467 ],
 [  -8.1325393 ],
 [  36.38014156],
 [ -33.5034125 ],
 [  34.46989941],
 [   6.57396727],
 [ -90.74615806],
 [  14.67585362],
 [ -50.44093447],
 [   1.39393803],
 [   8.94005061],
 [   1.29294706],
 [  -2.19570261],
 [ -63.61448142],
 [ -12.58334747],
 [  67.27332636],
 [ -94.34531566],
 [   7.85751412],
 [-114.42548942],
 [  -9.46628737],
 [ -70.83868833],
 [  -8.9367018 ],
 [ -29.03583543],
 [ -60.12013438],
 [ -23.73629921],
 [  27.80575676],
 [ -52.77275347],
 [  -7.18307087]])

x = X[:,0]
theta = np.array([[2.08573032],
                 [0.06474408]])
plt.scatter(x,y)
plt.plot(X, model(X, theta), c = 'r')
plt.title('cost = ' +str(int(cost (X, y,theta)) ))
print(cost (X, y,theta))
OptimaleTheta = gradientDescente(X,y, theta, 0.0001, 100000)

plt.show()
plt.scatter(x,y)
plt.plot(x, model(X, OptimaleTheta), c = 'g')
plt.title('cost = ' +str(int(cost (X, y,OptimaleTheta)) ))
plt.show()
